                            | #Execution begins at address 0,written by peanwang
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack,%rsp
0x00a: 804800000000000000   | 	call main
0x013: 00                   | 	halt
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | #This is main function
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ele1,%rdi
0x052: 805c00000000000000   | 	call sum_list
0x05b: 90                   | 	ret 
                            | #long sum_list(list_ptr ls)
                            | # ls in %rdi ,return i %rax
0x05c:                      | sum_list:
0x05c: 30fe0000000000000000 | 	irmovq $0,%r14
0x066: 30f00000000000000000 |         irmovq $0,%rax
0x070:                      | L2:
0x070: 61e7                 |         subq %r14,%rdi
0x072: 739a00000000000000   |         je L4
0x07b: 50d70000000000000000 | 	mrmovq (%rdi),%r13
0x085: 60d0                 |         addq %r13,%rax
0x087: 50770800000000000000 | 	mrmovq 8(%rdi),%rdi
0x091: 707000000000000000   |         jmp     L2
0x09a:                      | L4:
0x09a: 90                   |         ret
                            | 
                            | #stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
                            | 
