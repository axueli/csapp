                            | #rsum.ys,written by peanwang
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack,%rsp
0x00a: 804800000000000000   | 	call main
0x013: 00                   | 	halt
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | 
                            | #main function
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq ele1,%rdi
0x052: 805c00000000000000   | 	call rsum_list
0x05b: 90                   | 	ret
                            | 
                            | #rsum_list(list_ptr ls)
                            | #ls in %rdi,  return in %rax
0x05c:                      | rsum_list:
0x05c: 30fe0000000000000000 |   irmovq $0,%r14
0x066: 61e7                 |   subq %r14,%rdi
0x068: 739500000000000000   |   je L7
0x071: a03f                 |   pushq %rbx
0x073: 50370000000000000000 |   mrmovq (%rdi), %rbx
0x07d: 50770800000000000000 |   mrmovq 8(%rdi), %rdi
0x087: 805c00000000000000   |   call rsum_list
0x090: 6030                 |   addq %rbx,%rax
0x092: b03f                 |   popq %rbx
0x094: 90                   |   ret
0x095:                      | L7:
0x095: 30f00000000000000000 |   irmovq $0,%rax
0x09f: 90                   |   ret
                            | 
                            | #stack starts here and grows to lower address
0x200:                      | 	.pos 0x200
0x200:                      | stack:
                            | 
